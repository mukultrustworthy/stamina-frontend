{
  "openapi": "3.0.0",
  "paths": {
    "/api": {
      "get": {
        "operationId": "AppController_getData",
        "parameters": [],
        "responses": { "200": { "description": "" } },
        "tags": ["App"]
      }
    },
    "/api/workflow-registry/actions": {
      "post": {
        "description": "Creates a new workflow action in the registry with specified properties and schema",
        "operationId": "WorkflowRegistryController_createAction",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateActionRegistryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Action created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRegistryResponseDto"
                }
              }
            }
          },
          "400": { "description": "Invalid input data" },
          "409": { "description": "Action with the same key already exists" }
        },
        "summary": "Create a new action",
        "tags": ["workflow-registry"]
      },
      "get": {
        "description": "Retrieves all workflow actions from the registry with optional filtering",
        "operationId": "WorkflowRegistryController_getAllActions",
        "parameters": [
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "Filter by active status (true/false)",
            "schema": { "example": "true", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of actions retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionRegistryResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all actions",
        "tags": ["workflow-registry"]
      }
    },
    "/api/workflow-registry/actions/category/{category}": {
      "get": {
        "description": "Retrieves all active workflow actions filtered by category",
        "operationId": "WorkflowRegistryController_getActionsByCategory",
        "parameters": [
          {
            "name": "category",
            "required": true,
            "in": "path",
            "description": "Action category to filter by",
            "schema": {
              "enum": [
                "internal",
                "external",
                "ai",
                "communication",
                "database",
                "transform",
                "logic"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of actions in the specified category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ActionRegistryResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get actions by category",
        "tags": ["workflow-registry"]
      }
    },
    "/api/workflow-registry/actions/{key}": {
      "get": {
        "description": "Retrieves a specific workflow action by its unique key",
        "operationId": "WorkflowRegistryController_getActionByKey",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Unique action key",
            "schema": { "example": "send_email", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Action retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRegistryResponseDto"
                }
              }
            }
          },
          "404": { "description": "Action not found" }
        },
        "summary": "Get action by key",
        "tags": ["workflow-registry"]
      },
      "put": {
        "description": "Updates an existing workflow action with new properties",
        "operationId": "WorkflowRegistryController_updateAction",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Unique action key",
            "schema": { "example": "send_email", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateActionRegistryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Action updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ActionRegistryResponseDto"
                }
              }
            }
          },
          "400": { "description": "Invalid input data" },
          "404": { "description": "Action not found" }
        },
        "summary": "Update action",
        "tags": ["workflow-registry"]
      },
      "delete": {
        "description": "Permanently deletes a workflow action from the registry",
        "operationId": "WorkflowRegistryController_deleteAction",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Unique action key",
            "schema": { "example": "send_email", "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Action deleted successfully" },
          "404": { "description": "Action not found" }
        },
        "summary": "Delete action",
        "tags": ["workflow-registry"]
      }
    },
    "/api/workflow-registry/triggers": {
      "post": {
        "description": "Creates a new workflow trigger in the registry with specified properties and configuration",
        "operationId": "WorkflowRegistryController_createTrigger",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTriggerRegistryDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Trigger created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerRegistryResponseDto"
                }
              }
            }
          },
          "400": { "description": "Invalid input data" },
          "409": { "description": "Trigger with the same key already exists" }
        },
        "summary": "Create a new trigger",
        "tags": ["workflow-registry"]
      },
      "get": {
        "description": "Retrieves all workflow triggers from the registry with optional filtering",
        "operationId": "WorkflowRegistryController_getAllTriggers",
        "parameters": [
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "Filter by active status (true/false)",
            "schema": { "example": "true", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "List of triggers retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TriggerRegistryResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get all triggers",
        "tags": ["workflow-registry"]
      }
    },
    "/api/workflow-registry/triggers/category/{category}": {
      "get": {
        "description": "Retrieves all active workflow triggers filtered by category",
        "operationId": "WorkflowRegistryController_getTriggersByCategory",
        "parameters": [
          {
            "name": "category",
            "required": true,
            "in": "path",
            "description": "Trigger category to filter by",
            "schema": {
              "enum": [
                "webhook",
                "database",
                "schedule",
                "email",
                "external",
                "manual"
              ],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of triggers in the specified category",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TriggerRegistryResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get triggers by category",
        "tags": ["workflow-registry"]
      }
    },
    "/api/workflow-registry/triggers/event-source/{eventSource}": {
      "get": {
        "description": "Retrieves all active workflow triggers filtered by event source type",
        "operationId": "WorkflowRegistryController_getTriggersByEventSource",
        "parameters": [
          {
            "name": "eventSource",
            "required": true,
            "in": "path",
            "description": "Event source type to filter by",
            "schema": {
              "enum": ["webhook", "debezium", "poll", "manual"],
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "List of triggers with the specified event source",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/TriggerRegistryResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "Get triggers by event source",
        "tags": ["workflow-registry"]
      }
    },
    "/api/workflow-registry/triggers/{key}": {
      "get": {
        "description": "Retrieves a specific workflow trigger by its unique key",
        "operationId": "WorkflowRegistryController_getTriggerByKey",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Unique trigger key",
            "schema": { "example": "webhook_received", "type": "string" }
          }
        ],
        "responses": {
          "200": {
            "description": "Trigger retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerRegistryResponseDto"
                }
              }
            }
          },
          "404": { "description": "Trigger not found" }
        },
        "summary": "Get trigger by key",
        "tags": ["workflow-registry"]
      },
      "put": {
        "description": "Updates an existing workflow trigger with new properties and configuration",
        "operationId": "WorkflowRegistryController_updateTrigger",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Unique trigger key",
            "schema": { "example": "webhook_received", "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateTriggerRegistryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Trigger updated successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TriggerRegistryResponseDto"
                }
              }
            }
          },
          "400": { "description": "Invalid input data" },
          "404": { "description": "Trigger not found" }
        },
        "summary": "Update trigger",
        "tags": ["workflow-registry"]
      },
      "delete": {
        "description": "Permanently deletes a workflow trigger from the registry",
        "operationId": "WorkflowRegistryController_deleteTrigger",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "description": "Unique trigger key",
            "schema": { "example": "webhook_received", "type": "string" }
          }
        ],
        "responses": {
          "204": { "description": "Trigger deleted successfully" },
          "404": { "description": "Trigger not found" }
        },
        "summary": "Delete trigger",
        "tags": ["workflow-registry"]
      }
    },
    "/api/workflow-registry/trigger/{key}/resolved": {
      "get": {
        "operationId": "WorkflowRegistryController_getTriggerWithResolvedSchema",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "tenantId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "userId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["workflow-registry"]
      }
    },
    "/api/workflow-registry/action/{key}/resolved": {
      "get": {
        "operationId": "WorkflowRegistryController_getActionWithResolvedSchema",
        "parameters": [
          {
            "name": "key",
            "required": true,
            "in": "path",
            "schema": { "type": "string" }
          },
          {
            "name": "tenantId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          },
          {
            "name": "userId",
            "required": true,
            "in": "query",
            "schema": { "type": "string" }
          }
        ],
        "responses": { "200": { "description": "" } },
        "tags": ["workflow-registry"]
      }
    },
    "/api/workflow-registry/schema/action-properties": {
      "get": {
        "description": "Returns the schema definition for action properties to help with UI form generation",
        "operationId": "WorkflowRegistryController_getActionPropertySchema",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Action property schema retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "properties": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "displayName": { "type": "string" },
                          "name": { "type": "string" },
                          "type": { "type": "string" },
                          "required": { "type": "boolean" },
                          "options": { "type": "array" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get action property schema",
        "tags": ["workflow-registry"]
      }
    },
    "/api/workflow-registry/schema/trigger-properties": {
      "get": {
        "description": "Returns the schema definition for trigger properties to help with UI form generation",
        "operationId": "WorkflowRegistryController_getTriggerPropertySchema",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Trigger property schema retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "properties": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "displayName": { "type": "string" },
                          "name": { "type": "string" },
                          "type": { "type": "string" },
                          "required": { "type": "boolean" },
                          "options": { "type": "array" }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "summary": "Get trigger property schema",
        "tags": ["workflow-registry"]
      }
    },
    "/api/workflow-registry/trigger/{triggerKey}": {
      "post": {
        "operationId": "WorkflowRegistryController_processTrigger",
        "parameters": [
          {
            "name": "triggerKey",
            "required": true,
            "in": "path",
            "description": "Trigger key to process",
            "schema": { "type": "string" }
          }
        ],
        "requestBody": {
          "required": true,
          "description": "Trigger event data",
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "eventData": { "type": "object" },
                  "context": { "type": "object" }
                }
              }
            }
          }
        },
        "responses": {
          "200": { "description": "Trigger processed successfully" },
          "400": { "description": "Invalid trigger data" }
        },
        "summary": "Process trigger event",
        "tags": ["workflow-registry"]
      }
    },
    "/api/workflows": {
      "post": {
        "description": "Create a workflow with trigger, steps, and connections. Example: Lead status change → Create task.",
        "operationId": "WorkflowGenerationController_createWorkflow",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/CreateWorkflowDto" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Workflow created successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkflowResponseDto" }
              }
            }
          },
          "400": {
            "description": "Bad request - Invalid input or missing registry entries"
          },
          "500": { "description": "Internal server error" }
        },
        "summary": "Create a new workflow",
        "tags": ["Workflow Generation"]
      },
      "get": {
        "description": "Get a list of all workflows with their configuration",
        "operationId": "WorkflowGenerationController_listWorkflows",
        "parameters": [],
        "responses": {
          "200": {
            "description": "List of workflows retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/WorkflowResponseDto"
                  }
                }
              }
            }
          }
        },
        "summary": "List all workflows",
        "tags": ["Workflow Generation"]
      }
    },
    "/api/workflows/{id}": {
      "get": {
        "description": "Retrieve a specific workflow with its full configuration",
        "operationId": "WorkflowGenerationController_getWorkflow",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Workflow UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Workflow retrieved successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkflowResponseDto" }
              }
            }
          },
          "404": { "description": "Workflow not found" }
        },
        "summary": "Get workflow by ID",
        "tags": ["Workflow Generation"]
      },
      "put": {
        "description": "Update an existing workflow. Creates a new version if steps or trigger are modified.",
        "operationId": "WorkflowGenerationController_updateWorkflow",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Workflow UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/UpdateWorkflowDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow updated successfully",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/WorkflowResponseDto" }
              }
            }
          },
          "400": { "description": "Bad request - Invalid input" },
          "404": { "description": "Workflow not found" }
        },
        "summary": "Update workflow",
        "tags": ["Workflow Generation"]
      },
      "delete": {
        "description": "Delete a workflow and all its versions",
        "operationId": "WorkflowGenerationController_deleteWorkflow",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Workflow UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": { "description": "Workflow deleted successfully" },
          "404": { "description": "Workflow not found" }
        },
        "summary": "Delete workflow",
        "tags": ["Workflow Generation"]
      }
    },
    "/api/workflows/{id}/execute": {
      "post": {
        "description": "Manually trigger a workflow execution with custom data",
        "operationId": "WorkflowGenerationController_executeWorkflow",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "Workflow UUID",
            "schema": {
              "example": "123e4567-e89b-12d3-a456-426614174000",
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/WorkflowExecutionDto" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Workflow execution started",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": { "type": "boolean" },
                    "runId": { "type": "string" },
                    "error": { "type": "string" }
                  }
                }
              }
            }
          },
          "404": { "description": "Workflow not found" }
        },
        "summary": "Execute workflow manually",
        "tags": ["Workflow Generation"]
      }
    }
  },
  "info": {
    "title": "Internal Workflow API",
    "description": "API documentation for the Internal Workflow management system",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "workflow-registry",
      "description": "Workflow action and trigger registry management"
    }
  ],
  "servers": [],
  "components": {
    "schemas": {
      "CreateActionRegistryDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique key for the action",
            "example": "send_email"
          },
          "name": {
            "type": "string",
            "description": "Internal name of the action",
            "example": "sendEmail"
          },
          "displayName": {
            "type": "string",
            "description": "Display name shown in UI",
            "example": "Send Email"
          },
          "description": {
            "type": "string",
            "description": "Action description",
            "example": "Send email notification to users"
          },
          "category": {
            "type": "string",
            "enum": [
              "internal",
              "external",
              "ai",
              "communication",
              "database",
              "transform",
              "logic"
            ],
            "description": "Action category",
            "example": "communication"
          },
          "group": {
            "type": "array",
            "description": "Action groups",
            "example": ["action"],
            "items": { "type": "string", "enum": ["action", "trigger"] }
          },
          "icon": {
            "type": "string",
            "description": "Icon identifier",
            "example": "fa:envelope"
          },
          "iconColor": {
            "type": "string",
            "description": "Icon color",
            "example": "#007bff"
          },
          "documentationUrl": {
            "type": "string",
            "description": "Documentation URL",
            "example": "https://docs.example.com/actions/send-email"
          },
          "version": {
            "type": "number",
            "description": "Action version",
            "default": 1,
            "example": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether action is active",
            "default": true,
            "example": true
          },
          "propertiesSchema": {
            "type": "object",
            "description": "Node properties schema definition",
            "example": {
              "properties": [
                {
                  "displayName": "To",
                  "name": "to",
                  "type": "string",
                  "required": true
                }
              ]
            }
          },
          "credentialsSchema": {
            "type": "object",
            "description": "Required credentials schema",
            "example": { "required": ["emailApi"], "optional": [] }
          },
          "operationSchema": {
            "type": "object",
            "description": "Available operations schema",
            "example": {
              "email": {
                "operations": ["send", "template"],
                "displayName": "Email"
              }
            }
          }
        },
        "required": [
          "key",
          "name",
          "displayName",
          "category",
          "group",
          "propertiesSchema"
        ]
      },
      "ActionRegistryResponseDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique action key",
            "example": "send_email"
          },
          "name": {
            "type": "string",
            "description": "Action name",
            "example": "sendEmail"
          },
          "displayName": {
            "type": "string",
            "description": "Display name",
            "example": "Send Email"
          },
          "description": {
            "type": "string",
            "description": "Action description",
            "example": "Send email notification to users"
          },
          "category": {
            "type": "string",
            "enum": [
              "internal",
              "external",
              "ai",
              "communication",
              "database",
              "transform",
              "logic"
            ],
            "description": "Action category",
            "example": "communication"
          },
          "group": {
            "type": "array",
            "description": "Action groups",
            "example": ["action"],
            "items": { "type": "string", "enum": ["action", "trigger"] }
          },
          "icon": {
            "type": "string",
            "description": "Icon identifier",
            "example": "fa:envelope"
          },
          "iconColor": {
            "type": "string",
            "description": "Icon color",
            "example": "#007bff"
          },
          "documentationUrl": {
            "type": "string",
            "description": "Documentation URL",
            "example": "https://docs.example.com/actions/send-email"
          },
          "version": {
            "type": "number",
            "description": "Action version",
            "example": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether action is active",
            "example": true
          },
          "propertiesSchema": {
            "type": "object",
            "description": "Properties schema",
            "example": {
              "properties": [
                {
                  "displayName": "To",
                  "name": "to",
                  "type": "string",
                  "required": true
                }
              ]
            }
          },
          "credentialsSchema": {
            "type": "object",
            "description": "Credentials schema",
            "example": { "required": ["emailApi"], "optional": [] }
          },
          "operationSchema": {
            "type": "object",
            "description": "Operation schema",
            "example": {
              "email": {
                "operations": ["send", "template"],
                "displayName": "Email"
              }
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2023-12-01T10:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2023-12-01T15:30:00Z"
          }
        },
        "required": [
          "key",
          "name",
          "displayName",
          "category",
          "group",
          "version",
          "isActive",
          "propertiesSchema",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateActionRegistryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Internal name of the action",
            "example": "sendEmail"
          },
          "displayName": {
            "type": "string",
            "description": "Display name shown in UI",
            "example": "Send Email"
          },
          "description": {
            "type": "string",
            "description": "Action description",
            "example": "Send email notification to users"
          },
          "category": {
            "type": "string",
            "enum": [
              "internal",
              "external",
              "ai",
              "communication",
              "database",
              "transform",
              "logic"
            ],
            "description": "Action category",
            "example": "communication"
          },
          "group": {
            "type": "array",
            "description": "Action groups",
            "example": ["action"],
            "items": { "type": "string", "enum": ["action", "trigger"] }
          },
          "icon": {
            "type": "string",
            "description": "Icon identifier",
            "example": "fa:envelope"
          },
          "iconColor": {
            "type": "string",
            "description": "Icon color",
            "example": "#007bff"
          },
          "documentationUrl": {
            "type": "string",
            "description": "Documentation URL",
            "example": "https://docs.example.com/actions/send-email"
          },
          "version": {
            "type": "number",
            "description": "Action version",
            "example": 2
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether action is active",
            "example": false
          },
          "propertiesSchema": {
            "type": "object",
            "description": "Node properties schema definition",
            "example": {
              "properties": [
                {
                  "displayName": "To",
                  "name": "to",
                  "type": "string",
                  "required": true
                }
              ]
            }
          },
          "credentialsSchema": {
            "type": "object",
            "description": "Required credentials schema",
            "example": { "required": ["emailApi"], "optional": [] }
          },
          "operationSchema": {
            "type": "object",
            "description": "Available operations schema",
            "example": {
              "email": {
                "operations": ["send", "template"],
                "displayName": "Email"
              }
            }
          }
        }
      },
      "CreateTriggerRegistryDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique key for the trigger",
            "example": "webhook_received"
          },
          "name": {
            "type": "string",
            "description": "Internal name of the trigger",
            "example": "webhookReceived"
          },
          "displayName": {
            "type": "string",
            "description": "Display name shown in UI",
            "example": "Webhook Received"
          },
          "description": {
            "type": "string",
            "description": "Trigger description",
            "example": "Triggers when a webhook is received"
          },
          "category": {
            "type": "string",
            "enum": [
              "webhook",
              "database",
              "schedule",
              "email",
              "external",
              "manual"
            ],
            "description": "Trigger category",
            "example": "webhook"
          },
          "eventSource": {
            "type": "string",
            "enum": ["webhook", "debezium", "poll", "manual"],
            "description": "Event source type",
            "example": "webhook"
          },
          "version": {
            "type": "number",
            "description": "Trigger version",
            "default": 1,
            "example": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether trigger is active",
            "default": true,
            "example": true
          },
          "propertiesSchema": {
            "type": "object",
            "description": "Node properties schema definition",
            "example": {
              "properties": [
                {
                  "displayName": "HTTP Method",
                  "name": "method",
                  "type": "options",
                  "required": true,
                  "options": [
                    { "name": "POST", "value": "POST" },
                    { "name": "GET", "value": "GET" }
                  ]
                }
              ]
            }
          },
          "filterSchema": {
            "type": "object",
            "description": "Available filter conditions schema",
            "example": {
              "fields": [
                {
                  "displayName": "Request Body",
                  "name": "body",
                  "type": "object",
                  "operators": ["exists", "not_exists"]
                }
              ]
            }
          },
          "samplePayload": {
            "type": "object",
            "description": "Sample payload structure",
            "example": {
              "method": "POST",
              "headers": {},
              "body": {},
              "timestamp": "2023-12-01T10:00:00Z"
            }
          },
          "webhookConfig": {
            "type": "object",
            "description": "Webhook-specific configuration",
            "example": {
              "methods": ["POST", "PUT"],
              "auth_required": false,
              "response_mode": "onReceived"
            }
          },
          "availableVariables": {
            "type": "object",
            "description": "Available variables for filtering",
            "example": {
              "headers": "object",
              "body": "object",
              "query": "object",
              "method": "string"
            }
          }
        },
        "required": [
          "key",
          "name",
          "displayName",
          "category",
          "eventSource",
          "propertiesSchema"
        ]
      },
      "TriggerRegistryResponseDto": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "description": "Unique trigger key",
            "example": "webhook_received"
          },
          "name": {
            "type": "string",
            "description": "Trigger name",
            "example": "webhookReceived"
          },
          "displayName": {
            "type": "string",
            "description": "Display name",
            "example": "Webhook Received"
          },
          "description": {
            "type": "string",
            "description": "Trigger description",
            "example": "Triggers when a webhook is received"
          },
          "category": {
            "type": "string",
            "enum": [
              "webhook",
              "database",
              "schedule",
              "email",
              "external",
              "manual"
            ],
            "description": "Trigger category",
            "example": "webhook"
          },
          "eventSource": {
            "type": "string",
            "enum": ["webhook", "debezium", "poll", "manual"],
            "description": "Event source type",
            "example": "webhook"
          },
          "version": {
            "type": "number",
            "description": "Trigger version",
            "example": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether trigger is active",
            "example": true
          },
          "propertiesSchema": {
            "type": "object",
            "description": "Properties schema",
            "example": {
              "properties": [
                {
                  "displayName": "HTTP Method",
                  "name": "method",
                  "type": "options",
                  "required": true,
                  "options": [
                    { "name": "POST", "value": "POST" },
                    { "name": "GET", "value": "GET" }
                  ]
                }
              ]
            }
          },
          "filterSchema": {
            "type": "object",
            "description": "Filter schema",
            "example": {
              "fields": [
                {
                  "displayName": "Request Body",
                  "name": "body",
                  "type": "object",
                  "operators": ["exists", "not_exists"]
                }
              ]
            }
          },
          "samplePayload": {
            "type": "object",
            "description": "Sample payload",
            "example": {
              "method": "POST",
              "headers": {},
              "body": {},
              "timestamp": "2023-12-01T10:00:00Z"
            }
          },
          "webhookConfig": {
            "type": "object",
            "description": "Webhook configuration",
            "example": {
              "methods": ["POST", "PUT"],
              "auth_required": false,
              "response_mode": "onReceived"
            }
          },
          "availableVariables": {
            "type": "object",
            "description": "Available variables",
            "example": {
              "headers": "object",
              "body": "object",
              "query": "object",
              "method": "string"
            }
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2023-12-01T10:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2023-12-01T15:30:00Z"
          }
        },
        "required": [
          "key",
          "name",
          "displayName",
          "category",
          "eventSource",
          "version",
          "isActive",
          "propertiesSchema",
          "createdAt",
          "updatedAt"
        ]
      },
      "UpdateTriggerRegistryDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Internal name of the trigger",
            "example": "webhookReceived"
          },
          "displayName": {
            "type": "string",
            "description": "Display name shown in UI",
            "example": "Webhook Received"
          },
          "description": {
            "type": "string",
            "description": "Trigger description",
            "example": "Triggers when a webhook is received"
          },
          "category": {
            "type": "string",
            "enum": [
              "webhook",
              "database",
              "schedule",
              "email",
              "external",
              "manual"
            ],
            "description": "Trigger category",
            "example": "webhook"
          },
          "eventSource": {
            "type": "string",
            "enum": ["webhook", "debezium", "poll", "manual"],
            "description": "Event source type",
            "example": "webhook"
          },
          "version": {
            "type": "number",
            "description": "Trigger version",
            "example": 2
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether trigger is active",
            "example": false
          },
          "propertiesSchema": {
            "type": "object",
            "description": "Node properties schema definition",
            "example": {
              "properties": [
                {
                  "displayName": "HTTP Method",
                  "name": "method",
                  "type": "options",
                  "required": true,
                  "options": [
                    { "name": "POST", "value": "POST" },
                    { "name": "GET", "value": "GET" }
                  ]
                }
              ]
            }
          },
          "filterSchema": {
            "type": "object",
            "description": "Available filter conditions schema",
            "example": {
              "fields": [
                {
                  "displayName": "Request Body",
                  "name": "body",
                  "type": "object",
                  "operators": ["exists", "not_exists"]
                }
              ]
            }
          },
          "samplePayload": {
            "type": "object",
            "description": "Sample payload structure",
            "example": {
              "method": "POST",
              "headers": {},
              "body": {},
              "timestamp": "2023-12-01T10:00:00Z"
            }
          },
          "webhookConfig": {
            "type": "object",
            "description": "Webhook-specific configuration",
            "example": {
              "methods": ["POST", "PUT"],
              "auth_required": false,
              "response_mode": "onReceived"
            }
          },
          "availableVariables": {
            "type": "object",
            "description": "Available variables for filtering",
            "example": {
              "headers": "object",
              "body": "object",
              "query": "object",
              "method": "string"
            }
          }
        }
      },
      "WorkflowFilterConditionDto": {
        "type": "object",
        "properties": {
          "variable": {
            "type": "string",
            "description": "Variable path to filter on",
            "example": "{{variable.lead_status}}"
          },
          "operator": {
            "type": "string",
            "enum": [
              "equals",
              "not_equals",
              "contains",
              "not_contains",
              "greater_than",
              "less_than",
              "between",
              "in",
              "not_in",
              "is_empty",
              "is_not_empty",
              "starts_with",
              "ends_with",
              "after",
              "before"
            ],
            "description": "Filter operator",
            "example": "equals"
          },
          "value": {
            "type": "object",
            "description": "Value to compare against",
            "example": "new"
          },
          "type": {
            "type": "string",
            "description": "Data type of the value",
            "enum": ["string", "number", "boolean", "date"],
            "example": "string"
          }
        },
        "required": ["variable", "operator", "value", "type"]
      },
      "FilterGroupDto": {
        "type": "object",
        "properties": {
          "combinator": {
            "type": "string",
            "enum": ["AND", "OR"],
            "description": "How to combine conditions",
            "example": "AND"
          },
          "conditions": {
            "description": "Array of filter conditions",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowFilterConditionDto"
            }
          }
        },
        "required": ["combinator", "conditions"]
      },
      "TriggerConfigurationDto": {
        "type": "object",
        "properties": {
          "triggerKey": {
            "type": "string",
            "description": "Trigger key from trigger registry",
            "example": "lead_database_change"
          },
          "properties": {
            "type": "object",
            "description": "Trigger properties/configuration",
            "example": {
              "table_name": "leads",
              "change_type": ["UPDATE"],
              "monitor_fields": ["status"]
            }
          },
          "filters": {
            "description": "Filter conditions for the trigger",
            "allOf": [{ "$ref": "#/components/schemas/FilterGroupDto" }]
          }
        },
        "required": ["triggerKey", "properties"]
      },
      "StepConfigurationDto": {
        "type": "object",
        "properties": {
          "parameters": {
            "type": "object",
            "description": "Step configuration parameters",
            "example": {
              "title": "Follow up with lead",
              "description": "Call the lead to discuss proposal",
              "status": "pending",
              "entityType": "crm_leads"
            }
          },
          "resource": {
            "type": "string",
            "description": "Resource name for resource/operation pattern",
            "example": "task"
          },
          "operation": {
            "type": "string",
            "description": "Operation to perform on the resource",
            "example": "create"
          },
          "credentialId": {
            "type": "string",
            "description": "Credential ID for external actions",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": ["parameters"]
      },
      "WorkflowStepDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Step name/label",
            "example": "Create Follow-up Task"
          },
          "kind": {
            "type": "string",
            "enum": ["ACTION", "CONDITION", "DELAY", "LOOP"],
            "description": "Type of step",
            "example": "ACTION"
          },
          "actionKey": {
            "type": "string",
            "description": "Action key from action registry",
            "example": "taskManagement"
          },
          "configuration": {
            "description": "Step configuration",
            "allOf": [{ "$ref": "#/components/schemas/StepConfigurationDto" }]
          }
        },
        "required": ["name", "kind", "configuration"]
      },
      "WorkflowEdgeDto": {
        "type": "object",
        "properties": {
          "fromStep": {
            "type": "string",
            "description": "Source step name",
            "example": "trigger"
          },
          "toStep": {
            "type": "string",
            "description": "Target step name",
            "example": "Create Follow-up Task"
          },
          "branchKey": {
            "type": "string",
            "description": "Branch key for conditional flows",
            "default": "default",
            "example": "default"
          }
        },
        "required": ["fromStep", "toStep"]
      },
      "CreateWorkflowDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Workflow name",
            "example": "Lead Status Change to Task Creation"
          },
          "description": {
            "type": "string",
            "description": "Workflow description",
            "example": "Automatically create follow-up tasks when lead status changes"
          },
          "segment": {
            "type": "string",
            "enum": ["CRM", "SALES", "MARKETING"],
            "description": "Workflow segment",
            "example": "CRM"
          },
          "trigger": {
            "description": "Trigger configuration",
            "allOf": [
              { "$ref": "#/components/schemas/TriggerConfigurationDto" }
            ]
          },
          "steps": {
            "description": "Workflow steps",
            "type": "array",
            "items": { "$ref": "#/components/schemas/WorkflowStepDto" }
          },
          "edges": {
            "description": "Connections between steps",
            "type": "array",
            "items": { "$ref": "#/components/schemas/WorkflowEdgeDto" }
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether workflow is active",
            "default": true,
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "User ID who created the workflow",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": ["name", "segment", "trigger", "steps", "edges"]
      },
      "WorkflowResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Workflow ID",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          },
          "name": {
            "type": "string",
            "description": "Workflow name",
            "example": "Lead Status Change to Task Creation"
          },
          "description": {
            "type": "string",
            "description": "Workflow description"
          },
          "segment": {
            "type": "string",
            "enum": ["CRM", "SALES", "MARKETING"],
            "description": "Workflow segment"
          },
          "latestVersion": {
            "type": "number",
            "description": "Latest version number",
            "example": 1
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether workflow is active",
            "example": true
          },
          "createdBy": {
            "type": "string",
            "description": "User ID who created the workflow"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation timestamp",
            "example": "2023-12-01T10:00:00Z"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update timestamp",
            "example": "2023-12-01T15:30:00Z"
          },
          "trigger": {
            "description": "Trigger configuration",
            "allOf": [
              { "$ref": "#/components/schemas/TriggerConfigurationDto" }
            ]
          },
          "steps": {
            "description": "Workflow steps",
            "type": "array",
            "items": { "$ref": "#/components/schemas/WorkflowStepDto" }
          },
          "edges": {
            "description": "Connections between steps",
            "type": "array",
            "items": { "$ref": "#/components/schemas/WorkflowEdgeDto" }
          }
        },
        "required": [
          "id",
          "name",
          "description",
          "segment",
          "latestVersion",
          "isActive",
          "createdBy",
          "createdAt",
          "updatedAt",
          "trigger",
          "steps",
          "edges"
        ]
      },
      "UpdateWorkflowDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Workflow name",
            "example": "Updated Lead Status Change to Task Creation"
          },
          "description": {
            "type": "string",
            "description": "Workflow description",
            "example": "Updated description for the workflow"
          },
          "segment": {
            "type": "string",
            "enum": ["CRM", "SALES", "MARKETING"],
            "description": "Workflow segment",
            "example": "CRM"
          },
          "trigger": {
            "description": "Updated trigger configuration",
            "allOf": [
              { "$ref": "#/components/schemas/TriggerConfigurationDto" }
            ]
          },
          "steps": {
            "description": "Updated workflow steps",
            "type": "array",
            "items": { "$ref": "#/components/schemas/WorkflowStepDto" }
          },
          "edges": {
            "description": "Updated connections between steps",
            "type": "array",
            "items": { "$ref": "#/components/schemas/WorkflowEdgeDto" }
          },
          "isActive": {
            "type": "boolean",
            "description": "Whether workflow is active",
            "example": false
          }
        }
      },
      "WorkflowExecutionDto": {
        "type": "object",
        "properties": {
          "triggerData": {
            "type": "object",
            "description": "Trigger data that started the workflow",
            "example": {
              "eventId": "abc123",
              "leadId": "lead_12345",
              "oldStatus": "new",
              "newStatus": "contacted"
            }
          },
          "variables": {
            "type": "object",
            "description": "Additional variables to pass to workflow",
            "example": { "customField": "value" }
          },
          "userId": {
            "type": "string",
            "description": "User ID executing the workflow",
            "example": "123e4567-e89b-12d3-a456-426614174000"
          }
        },
        "required": ["triggerData"]
      }
    }
  }
}
